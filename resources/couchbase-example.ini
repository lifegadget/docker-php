[couchbase]
; Specify the compression algorithm to use.
; The legal values are:
;   * fastlz
;   * zlib
;   * none
couchbase.compressor = none

; Do not store the value compressed unless the savings of the compressed
; value exceeds the following factor: uncompressed > compressed * factor
couchbase.compression_factor = 1.3

; Do not try to compress items smaller than the following threshold.
; Specified in bytes.  Note that values which appear to be JSON are
; never compressed.
couchbase.compression_threshold = 2000

; The operations with durability requirements are implemented by polling
; the cluster for information about the state of the change. This tunable
; specifies the interval between each poll request.
;
; The poll interval is specified in microseconds
couchbase.durability_default_poll_interval = 100000

; The timeout for operations with durability requirements (unless
; specified).
;
; An operation may take a long time depending on the workload
; on the cluster and the performance of the IO subsystem. To avoid
; waiting "forever" the durability operations time out after a
; while. By default this is set to 40 seconds, but this may not be
; enough if the IO subsystem on the cluster nodes is not capable of
; consuming the write-load on the cluster fast enough.
;
; The timeout is specified in microseconds
couchbase.durability_default_timeout = 40000000

; Specify the serializer to use to store objects in the Couchbase cluster.
;
; Legal values:
;   php        - Use the standard php serializer
;   json       - Use the php JSON encoding
;   json_array - Same as json, but decodes into arrays
;   igbinary   - This option is only available if the extension is build
;                with igbinary support
couchbase.serializer = php

; The maximum time a view request may execute.
;
; A view request may be a timeconsuming task if the view must be built
; before it can be executed (most likely if you try to use
; "stale=false"). The server enforce its own timeouts to monitor the
; execution of a view request, but the client cannot blindly depend on
; the server timeout. If something happens to to the network the client
; may not receive a notification from the server causing the client to
; "wait forever". This timeout value is a safety-net to detect such
; problems.
;
; The view timeout value is specified in seconds.
couchbase.view_timeout = 75

; The default setting for persistent "connections" unless specified
; in the constructor.
;
; Couchbase use a REST interface to bootstrap the client with the
; topology of the cluster. This involves multiple round trips to the
; cluster in order to authorize and figure out the full topology of
; the cluster. If your application code creates a lot of short lived
; instances to the couchbase cluster you may want to reuse the same
; underlying instance to communicate to the cluster (and hence bypass
; the authorization for each creation. This behaviour is the default,
; but if you for some reason want to disable this behavior you can do
; so by setting this tunable to Off
;
; The default setting for persistent connection.
;   Off = disable
;   On = enable
couchbase.instance.persistent = On

; Flushing a bucket should normally be done by using the REST
; interface, but if you're working towards a 1.8.1 server (or
; a memcached cluster) you may want to use the memcached way
; of flushing a bucket
;
; The parameter may be set to:
;   On = flush the bucket by using REST
;   Off = flush the bucket by using the memcached protocol
couchbase.restflush = On

; An optional path to a directory where the library may store files
; containing the cluster topology (used to cache the configuration
; instead of connecting to the rest server each time to download it)
couchbase.config_cache = "/app/cache/couchbase"

; Try to connect to the next node in the configuration list if
; the node don't contain the name of the bucket, or the
; credentials is incorrect. This situation may occur if
; the node is removed from the cluster, but is still listening
; on the port.
;
; The parameter may be set to:
;   On = Try next node if bucket doesn't exist (or with incorrect cred)
;   Off = Fail if the bucket doesn't exist or the credentials is incorrect
couchbase.skip_config_errors_on_connect = Off